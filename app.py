# -*- coding: utf-8 -*-
"""university_helpdesk_End_to_End_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xnch9YqFKrgOySHViHInVMdpfQ_peqyG
"""

!streamlit run app.py
!pip install --upgrade streamlit

import os
import nltk
import ssl
import streamlit as st
import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# Ensure nltk downloads work in all environments
ssl._create_default_https_context = ssl._create_unverified_context
nltk.data.path.append(os.path.abspath("nltk_data"))
nltk.download('punkt')

# Updated intents for university help desk
time_table = "You can find your class timetable on the university portal under the 'Academics' section. If you're unable to log in, please contact the IT help desk."
registration_info = "To register for courses, go to the student portal, click on 'Course Registration', and follow the steps. Make sure to check prerequisites!"
financial_aid = "For financial aid inquiries, visit the Financial Services section on the university website or email them at finaid@university.edu."

# Updated intents for university help desk
intents = [
    {
        "tag": "greeting",
        "patterns": ["Hi", "Hello", "Hey", "Good morning", "Good afternoon"],
        "responses": ["Hello! How can I assist you today?", "Hi there! Do you need help with something university-related?"]
    },
    {
        "tag": "goodbye",
        "patterns": ["Bye", "See you", "Goodbye", "Take care"],
        "responses": ["Goodbye! Don't hesitate to come back if you need anything else.", "Take care! Wish you the best with your studies."]
    },
    {
        "tag": "timetable",
        "patterns": ["Where is my timetable?", "How do I check my class schedule?", "Timetable?", "Schedule for classes"],
        "responses": ["You can find your class timetable on the university portal under the 'Academics' section. If you're unable to log in, please contact the IT help desk."]
    },
    {
        "tag": "registration",
        "patterns": ["How to register for classes?", "I want to enroll in courses", "Course registration"],
        "responses": ["To register for courses, go to the student portal, click on 'Course Registration', and follow the steps. Make sure to check prerequisites!"]
    },
    {
        "tag": "financial_aid",
        "patterns": ["How do I apply for financial aid?", "Financial help?", "Money for tuition"],
        "responses": ["For financial aid inquiries, visit the Financial Services section on the university website or email them at finaid@university.edu."]
    },
    {
        "tag": "office_hours",
        "patterns": ["What are office hours?", "When can I visit my professor?", "Professor's availability"],
        "responses": ["Office hours vary by professor and are usually posted on the course syllabus or the department website. You can also email your professor to ask."]
    },
    {
        "tag": "professor_contact",
        "patterns": ["How can I contact my professor?", "Professor email?", "Reach out to instructor"],
        "responses": ["You can contact your professor via the email listed in the course syllabus or on the university's faculty directory."]
    },
    {
        "tag": "library",
        "patterns": ["What are the library hours?", "Is the library open?", "Library schedule"],
        "responses": ["The library is typically open from 8 AM to 10 PM on weekdays and 10 AM to 6 PM on weekends. Please check the official website for updates."]
    },
    {
        "tag": "thanks",
        "patterns": ["Thank you", "Thanks", "Thanks a lot"],
        "responses": ["You're welcome! Let me know if you have more questions.", "No problem! I'm here to help."]
    }
]

# Create vectorizer and classifier
vectorizer = TfidfVectorizer()
clf = LogisticRegression(random_state=0, max_iter=10000)

# Training data
tags = []
patterns = []
for intent in intents:
    for pattern in intent['patterns']:
        tags.append(intent['tag'])
        patterns.append(pattern)

# Train model
x = vectorizer.fit_transform(patterns)
y = tags
clf.fit(x, y)

def chatbot(input_text):
    input_vector = vectorizer.transform([input_text])
    predicted_tag = clf.predict(input_vector)[0]
    for intent in intents:
        if intent['tag'] == predicted_tag:
            return random.choice(intent['responses'])
    return "I'm sorry, I didn't understand that. Could you please rephrase?"

counter = 0

def main():
    global counter
    st.title("University Help Desk Chatbot")
    st.write("Ask me about registration, timetables, financial aid, office hours, and more.")

    counter += 1
    user_input = st.text_input("You:", key=f"user_input_{counter}")

    if user_input:
        response = chatbot(user_input)
        st.text_area("Chatbot:", value=response, height=100, max_chars=None, key=f"chatbot_response_{counter}")

        if response.lower() in ['goodbye', 'bye']:
            st.write("Thank you for chatting! Good luck with your studies.")
            st.stop()

if __name__ == '__main__':
    main()